;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'nil

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers

;;;; Layers

   '(helm ; full-featured auto-completion
     eww

     ;; (keyboard-layout :variables kl-layout 'colemak-neio)

     ;; Features
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-complete-with-key-sequence "ff")
     ;; (colors :variables colors-colorize-identifiers 'variables)
     (elfeed :variables rmh-elfeed-org-files (list "~/code/dots/files/elfeed.org"))
     git    ; magit! SPC g m
     version-control
     pdf ; read pdfs, use with org-noter
     github
     ;; (shell :variables
     ;;        shell-default-shell 'ansi-term
     ;;        shell-default-position 'bottom)
     (shell :variables
            shell-default-shell 'vterm
            shell-default-position 'bottom
            shell-enable-smart-eshell nil
            shell-protect-eshell-prompt t)
     ranger
     imenu-list ; SPC b i
     spell-checking ; requires aspell
     syntax-checking
     ;; unicode-fonts

     ;; Languages
     ;; agda
     ;; coq
     (c-c++ :variables c-c++-enable-clang-support t
                       c-c++-enable-clang-format-on-save t
                       c-c++-enable-auto-newline t)
     docker
     ;; dhall
     racket
     javascript ; json
     bibtex ; org-ref!
     emacs-lisp
     ;; (python :variables python-enable-yapf-format-on-save t)
     ;; (python :variables python-formatter 'yapf) ; only on develop
     lsp
     (python :variables python-backend 'lsp)
     hy

     (haskell :variables
              haskell-enable-hindent-style "fundamental"
              haskell-completion-backend 'lsp
              haskell-process-suggest-remove-import-lines nil
              lsp-haskell-process-path-hie "haskell-language-server-wrapper")
     ;; (haskell :variables
     ;;          haskell-enable-hindent-style "fundamental"
     ;;          haskell-completion-backend 'lsp)
     ;; (haskell :variables ; haskell-enable-hindent-style "fundamental"
     ;;                     haskell-completion-backend 'dante
     ;;                     haskell-enable-hindent nil)
     ;; (latex :variables
     ;;        latex-build-command "LatexMk"
     ;;        latex-enable-auto-fill t)
     markdown
     org-roam
     (org :variables org-enable-roam-support t)
     outshine
     rust
     ;; saw-script
     nixos
     ;; (java :variables java-backend 'lsp)
     ;; dap
     ;; (scala :variables
     ;;        scala-auto-start-ensime t
     ;;        scala-enable-eldoc nil) ;; type at point (sometimes freezes)

     shell-scripts ; enable shellcheck linting. TODO requires shellcheck.
     yaml

     ;; My layers
     alloy
     (myorg :variables myorg-enable-roam-server nil))

;;;; Additional packages

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(doct
     csv-mode
     noccur                             ; search in project
     evil-fringe-mark
     ialign                             ; interactive align-regexp
     smart-hungry-delete                ; delete all whitespace at once
     direnv                             ; direnv + nix
     math-symbols                       ; easily insert unicode latex macros
     native-complete
     company-native-complete
     company-tabnine

     ;; dhall-mode
     lispy
     lispyville
     ;; all-the-icons
     ;; w3m
     ;; mmm-mode      ; markdown multi-mode
     prop-menu                          ; needed for saw-script-mode
     helm-dash
     ;; pocket-reader
     ;; markdown-preview-eww

     ;; UI
     exwm
     dimmer                             ; dim inactive buffers
     olivetti                           ; centering the only active window
     prism                              ; color blocks by depth
     marginalia
     (outline-toc
      :location (recipe :fetcher github
                        :repo "abingham/outline-toc.el"))

     ;; Emacs Lisp
     helpful
     suggest
     eros
     doctest
     buttercup
     el2markdown

     multi-vterm
     ;; flycheck-mypy
     ;; doom-themes
     dracula-theme

     ;; TODO: Undefined: contract-defun ??
     (contract
      :location (recipe :fetcher github
                        :repo "langston-barrett/contract.el"
                        :ref "881bef7a69393a5cc46019567e292155dbea0198"))

     ;; (klister-mode
     ;;  :location (recipe :fetcher github
     ;;                    :repo "gelisam/klister"
     ;;                    :files '("klister.el")))

     ;; (aadl
     ;;  :location (recipe :fetcher github
     ;;                    :repo "OpenAADL/AADLib"
     ;;                    :files '("share/emacs/aadl-mode.el")))

     (doctest
      :location (recipe :fetcher github
                        :repo "riscy/doctest"))

     (symbol-overlay
      :location (recipe :fetcher github
                        :repo "wolray/symbol-overlay"))

     (eacl
      :location (recipe :fetcher github
                        :repo "redguardtoo/eacl"))

     (haskell-pragma
      :location (recipe :fetcher github
                        :repo "travitch/haskell-pragma.el"))

     (haskell-pragma
      :location (recipe :fetcher github
                        :repo "kmonad/kbd-mode"
                        :files '("lisp/kbd-mode.el")))

     ;; (k3-mode
     ;;  :location (recipe :fetcher github
     ;;                    :repo "kframework/k-editor-support"
     ;;                    :files '("emacs/k3-mode.el")))

     (souffle-mode
      :location (recipe :fetcher github
                        :repo "souffle-lang/souffle-mode"))


     ;; An error occurred while installing ql-mode (error: (error Invalid version syntax: ‘Wrong type argument: stringp, quote’ (must start with a number)))
     ;; (ql-mode
     ;;  :location (recipe :fetcher github
     ;;                    :repo "Semmle/ql"
     ;;                    :files '("ql/misc/emacs/ql-mode-base.el")))

     ;; minimap
     ;; (minimap
     ;;  :location (recipe :fetcher github
     ;;                    :repo "langston-barrett/minimap"))

     ;; (graph
     ;;  :location (recipe :fetcher github
     ;;                    :repo "storax/graph.el"))

     ;; (dockerfile-mode
     ;;  :location (recipe :fetcher github
     ;;                    :repo "spotify/dockerfile-mode"))

     ;; (google-java-format
     ;;  :location (recipe :fetcher github
     ;;                    :repo "google/google-java-format"
     ;;                    :files '("core/src/main/scripts/google-java-format.el")))

     ;; here be big repos :'(
     ;; https://framagit.org/steckerhalter/quelpa/issues/164

     ;; (saw-script
     ;;  :location (recipe :fetcher github
     ;;                    :repo "GaloisInc/saw-script"
     ;;                    :files '("saw-script.el")))

     ;; (llvm-mode
     ;;  :location (recipe :fetcher github
     ;;                    :repo "llvm-mirror/llvm"
     ;;                    :files '("utils/emacs/llvm-mode.el")))

     ;; (agda-input
     ;;  :location (recipe :fetcher github
     ;;                    :repo "agda/agda"
     ;;                    :files '("src/data/emacs-mode/agda-input.el")))
     )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   ;; https://github.com/syl20bnr/spacemacs/issues/2294
   ;; flycheck-haskell causes post-command-hook to fail if ghc is not installed
   dotspacemacs-excluded-packages '(google-c-style
                                    flycheck-haskell)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default (format "spacemacs-%s.pdmp" emacs-version))
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. Spacelpa is currently in
   ;; experimental state please use only for testing purposes.
   ;; (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; The minimum delay in seconds between number key presses. (default 0.4)
   dotspacemacs-startup-buffer-multi-digit-delay 0.4

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes/colorschemes, the first of the list is loaded when
   ;; spacemacs starts. Press <SPC> T n to cycle to the next theme in the
   ;; list (works great with 2 themes variants, one dark and one light)
   ;; colorscheme
   dotspacemacs-themes '(dracula
                         spacemacs-dark
                         spacemacs-light
                         ;; doom-one
                         ;; dichromacy
                         ;; zenburn
                         ;; hc-zenburn
                         ;; sanityinc-tomorrow-eighties
                         )
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Hack"
                               :size 18
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols nil ; https://github.com/syl20bnr/spacemacs/issues/8462
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Show the scroll bar while scrolling. The auto hide time can be configured
   ;; by setting this variable to a number. (default t)
   dotspacemacs-scroll-bar-while-scrolling nil

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil', `origami' and `vimish'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil and `dotspacemacs-activate-smartparens-mode' is also non-nil,
   ;; `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil smartparens-mode will be enabled in programming modes.
   ;; (default t)
   dotspacemacs-activate-smartparens-mode t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   dotspacemacs-enable-server nil ; https://github.com/syl20bnr/spacemacs/issues/8462

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; If nil then Spacemacs uses default `frame-title-format' to avoid
   ;; performance issues, instead of calculating the frame title by
   ;; `spacemacs/title-prepare' all the time.
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Show trailing whitespace (default t)
   dotspacemacs-show-trailing-whitespace t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfer with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; If non-nil shift your number row to match the entered keyboard layout
   ;; (only in insert state). Currently supported keyboard layouts are:
   ;; `qwerty-us', `qwertz-de' and `querty-ca-fr'.
   ;; New layouts can be added in `spacemacs-editing' layer.
   ;; (default nil)
   dotspacemacs-swap-number-row nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; Coq layer defines abbreviations on *single letters*, so by default typing
  ;; one letter and pressing ESC will expand the letter, which prevents typing
  ;; https://github.com/syl20bnr/spacemacs/issues/8853
  ;; (load-file (let ((coding-system-for-read 'utf-8))
  ;;              (shell-command-to-string "agda-mode locate")))

  (setq org-directory "~/org")
  ;; "This variable needs to be set before any calls to Org-roam functions,
  ;; including enabling org-roam-mode."
  (setq org-roam-directory org-directory)

  ;; "This variable needs to be set before org.el is loaded."
  (setq org-export-backends '(ascii html md latex))

  (add-to-list 'configuration-layer-elpa-archives '("melpa-stable" . "stable.melpa.org/packages/"))
  (add-to-list 'package-pinned-packages '(ensime . "melpa-stable"))

  (setq evil-want-abbrev-expand-on-insert-exit nil))

;;;; =user-config=

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  (defconst my/emacs-dir (concat user-home-directory "code/dots/files/emacs/"))
  (defconst my/config-dir (concat my/emacs-dir "config/"))
  (defun my/load (path) (load-file (concat my/config-dir path)))
  (my/load "init.el")) ;; end user-config

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#080808" "#d70000" "#67b11d" "#875f00" "#268bd2" "#af00df" "#00ffff" "#b2b2b2"])
 '(auth-source-save-behavior nil)
 '(evil-want-Y-yank-to-eol nil)
 '(flycheck-python-flake8-executable "python3")
 '(flycheck-python-pycompile-executable "python3")
 '(flycheck-python-pylint-executable "python3")
 '(minimap-active-region-background
   '((((background dark))
      (:background "yellow" :foreground "yellow"))
     (t
      (:background "yellow" :foreground "yellow"))) t)
 '(package-selected-packages
   '(rvm ruby-tools ruby-test-mode ruby-hash-syntax rubocopfmt rubocop rspec-mode robe inf-ruby rbenv rake minitest helm-gtags ggtags yasnippet-snippets yapfify yaml-mode xterm-color ws-butler writeroom-mode winum which-key web-beautify vterm volatile-highlights vi-tilde-fringe uuidgen use-package treemacs-projectile treemacs-magit treemacs-evil toml-mode toc-org tao-theme symon symbol-overlay string-inflection spaceline-all-the-icons smeargle smart-hungry-delete shell-pop restart-emacs ranger rainbow-delimiters racket-mode racer pytest pyenv-mode py-isort prop-menu proof-general prettier-js pippel pipenv pip-requirements persp-mode pcre2el password-generator paradox overseer origami orgit org-ref org-projectile org-present org-pomodoro org-noter org-mime org-download org-cliplink org-bullets org-brain org-board open-junk-file olivetti nodejs-repl nix-mode nameless mvn multi-term move-text mmm-mode meghanada maven-test-mode math-symbols markdown-toc magit-svn magit-gitflow macrostep lsp-ui lsp-treemacs lsp-python-ms lsp-java lsp-haskell lorem-ipsum livid-mode live-py-mode lispyville link-hint json-navigator json-mode js2-refactor js-doc intero insert-shebang indent-guide importmagic ialign hybrid-mode hungry-delete hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helpful helm-xref helm-themes helm-swoop helm-rtags helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-org helm-nixos-options helm-mode-manager helm-make helm-lsp helm-hoogle helm-gitignore helm-git-grep helm-flx helm-descbinds helm-company helm-c-yasnippet helm-ag haskell-snippets haskell-pragma groovy-mode groovy-imports gradle-mode google-translate golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fuzzy font-lock+ flyspell-correct-helm flycheck-rust flycheck-rtags flycheck-pos-tip flycheck-package flycheck-mypy flycheck-bashate flx-ido fish-mode fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-org evil-numbers evil-nerd-commenter evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help ensime emojify elisp-slime-nav elfeed-org elfeed-goodies editorconfig eacl dumb-jump dropbox-conflicts dotenv-mode doom-themes doom-modeline disaster direnv dimmer diminish diff-hl dhall-mode devdocs define-word dap-mode dante cython-mode csv-mode cquery cpp-auto-include company-tern company-statistics company-shell company-rtags company-nixos-options company-lsp company-ghci company-ghc company-coq company-cabal company-c-headers company-anaconda column-enforce-mode cmm-mode clean-aindent-mode clang-format cheatsheet centered-cursor-mode ccls cargo browse-at-remote blacken auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile attrap aggressive-indent ace-link ace-jump-helm-line ac-ispell))
 '(safe-local-variable-values
   '((eval add-hook 'after-save-hook #'org-babel-tangle)
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/v-spells" :include
       ("v-spells.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/v-spells/bib/pdf" :include nil)
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/v-spells/img" :include
       ("v-spells/overall.svg" "v-spells/ta1.jpg" "v-spells/ta2.jpg" "v-spells/ta3.jpg")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/v-spells" :include
       ("v-spells.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/v-spells/bib/pdf" :include nil)
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/v-spells/img" :include
       ("./img/v-spells/overall.svg" "./img/v-spells/ta1.jpg" "./img/v-spells/ta2.jpg" "./img/v-spells/ta3.jpg")))
     (direnv-mode . 1)
     (org-publish-project-alist
      ("this" :components
       ("org" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/fuzzing" :include
       ("fuzzing.org" "klee.org" "optimization.org" "symbolic-execution.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/fuzzing/img" :include
       ("mutation-based-fuzzing.png")))
     (compilation-search-path "llvm/PointerAnalysis/datalog/points-to")
     (compilation-search-path . t)
     (org-indent-mode)
     (org-publish-project-alist
      ("this" :components
       ("org" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/vulnerability-triage-notes" :include
       ("vulnerability-triage-notes.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include nil))
     (org-publish-project-alist
      ("this" :components
       ("org"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/vulnerability-triage-notes" :include
       ("vulnerability-triage-notes.org" "vulnerability-triage-research.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/vulnerability-triage-notes/img" :include nil))
     (org-export-exclude-tags noexport)
     (org-publish-project-alist
      ("this" :components
       ("org" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/fuzzing" :include
       ("fuzzing.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include nil))
     (org-publish-project-alist
      ("this" :components
       ("org" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/vulnerability-triage-research" :include
       ("vulnerability-triage-research.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include nil))
     (org-publish-project-alist
      ("this" :components
       ("org" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/vulnerability-triage-research" :include
       ("vulnerability-triage-research.org"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("asdf")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/chess-mate-pointer-analysis" :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "introspective-analysis.pdf" "principled-context-sensitivity.pdf"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png" "pointer-analysis-montague.svg")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/chess-mate-pointer-analysis" :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "introspective-analysis.pdf" "principled-context-sensitivity.pdf"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/chess-mate-pointer-analysis" :with-tags nil :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "introspective-analysis.pdf" "principled-context-sensitivity.pdf"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "css" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function my/org-publish-to-markdown :publishing-directory "meta/export/chess-mate-pointer-analysis" :with-tags nil :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "introspective-analysis.pdf" "principled-context-sensitivity.pdf"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "css" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function org-html-publish-to-html :publishing-directory "meta/export/chess-mate-pointer-analysis" :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "introspective-analysis.pdf" "principled-context-sensitivity.pdf"))
      ("css" :base-directory "meta" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/meta" :include
       ("style.css"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "css" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function org-html-publish-to-html :publishing-directory "meta/export/chess-mate-pointer-analysis" :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf" "doop2souffle.pdf" "hybrid-context-sensitivity.pdf" "pick-your-contexts.pdf" "context-transformations.pdf" "transformations.pdf" "principled-context-sensitivity.pdf"))
      ("css" :base-directory "meta" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/meta" :include
       ("style.css"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-export-with-broken-links . mark)
     (org-publish-project-alist
      ("this" :components
       ("org" "pdf" "css" "img"))
      ("org" :base-directory "." :base-extension "fake" :publishing-function org-html-publish-to-html :publishing-directory "meta/export/chess-mate-pointer-analysis" :include
       ("chess-mate-pointer-analysis.org"))
      ("pdf" :base-directory "bib/pdf" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/bib/pdf" :include
       ("pointer-tutorial.pdf" "strictly-declarative.pdf"))
      ("css" :base-directory "meta" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/meta" :include
       ("style.css"))
      ("img" :base-directory "img" :base-extension "fake" :publishing-function org-publish-attachment :publishing-directory "meta/export/chess-mate-pointer-analysis/img" :include
       ("souffle-compiler.png")))
     (org-publish-project-alist
      ("this" :publishing-directory "meta/export" :base-extension ".org|.pdf" :recursive t))
     (org-publish-project-alist
      ("this" :publishing-directory "meta/export" :base-extension ".org|.pdf")
      :recursive t)
     (direnv-mode . t)
     (org-image-actual-width . 400)
     (dante-repl-command-line "nix-shell" "--pure" "--run" "cabal repl lib:language-souffle --builddir=dist/dante")
     (eval when
           (fboundp 'c-toggle-comment-style)
           (c-toggle-comment-style 1))
     (eval c-set-offset 'innamespace 0)
     (org-archive-location . "~/org/archive/%s::")
     (org-archive-location . "~/archive/%s::")
     (org-indent-mode . t)
     (dante-repl-command-line . "echo")
     (org-indent-mode . 1)
     (eval defun my/arxiv-link
           (no)
           "Browse a arxiv link"
           (browse-url
            (concat "https://arxiv.org/abs/" no)))
     (eval org-add-link-type "arxiv" 'my/arxiv-link)
     (org-log-into-drawer . t)
     (org-enforce-todo-dependencies . t)
     (org-enforce-todo-checkbox-dependencies . t)
     (org-archive-location . "~/Dropbox/langston/archive/org/archive-%s::")
     (dante-repl-command-line "nix-shell" "shell.nix" "--run" "cabal v2-repl --builddir=dist-newstyle/dante")
     (dante-repl-command-line "nix-shell" "nix/shell.nix" "--pure" "--run" "cabal repl --builddir=dist/dante")
     (dante-repl-command-line quote
                              ("nix-shell" "nix/shell.nix" "--pure" "--run" "cabal repl --builddir=dist/dante"))
     (javascript-backend . tern)
     (javascript-backend . lsp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(minimap-active-region-background ((t (:background "gray25")))))
)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#080808" "#d70000" "#67b11d" "#875f00" "#268bd2" "#af00df" "#00ffff" "#b2b2b2"])
 '(package-selected-packages
   (quote
    (yapfify yaml-mode xterm-color ws-butler winum which-key web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package toml-mode toc-org symbol-overlay sr-speedbar spaceline souffle-mode smeargle smart-hungry-delete shell-pop restart-emacs ranger rainbow-delimiters racer pyvenv pytest pyenv-mode py-isort prop-menu prism pip-requirements persp-mode pcre2el paradox spinner outshine outorg outline-toc origami orgit org-sidebar org-ql peg ov org-super-agenda map ts org-roam emacsql-sqlite3 org-ref pdf-tools key-chord org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-noter org-mime org-make-toc org-download org-bullets org-board open-junk-file olivetti nix-mode neotree multi-term move-text mmm-mode math-symbols markdown-toc magit-gitflow magit-popup magit-gh-pulls macrostep lorem-ipsum livid-mode skewer-mode live-py-mode lispyville lispy zoutline counsel swiper linum-relative link-hint js2-refactor multiple-cursors js2-mode js-doc intero insert-shebang indent-guide imenu-list ialign hydra lv hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers parent-mode highlight-indentation helpful elisp-refs dash-functional loop helm-themes helm-swoop helm-pydoc helm-projectile projectile helm-nixos-options helm-mode-manager helm-make helm-hoogle helm-gitignore request helm-flx helm-descbinds helm-dash dash-docs helm-company helm-c-yasnippet helm-bibtex bibtex-completion parsebib helm-ag haskell-snippets haskell-pragma google-translate golden-ratio gnuplot gitignore-mode github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ git-gutter-fringe git-gutter+ git-gutter gist gh marshal logito pcache gh-md fuzzy flyspell-correct-helm flyspell-correct flycheck-rust flycheck-pos-tip pos-tip flycheck-mypy flycheck pkg-info epl flx-ido flx fish-mode fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist highlight evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit magit git-commit with-editor evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-fringe-mark fringe-helper evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu eshell-z eshell-prompt-extras esh-help emojify ht elisp-slime-nav elfeed-web simple-httpd elfeed-org elfeed-goodies ace-jump-mode noflet powerline popwin elfeed eacl ivy dumb-jump doct dockerfile-mode docker transient tablist json-mode docker-tramp json-snatcher json-reformat disaster direnv dimmer diminish diff-hl dhall-mode reformatter define-word cython-mode company-statistics company-shell company-nixos-options nixos-options company-ghci company-ghc ghc haskell-mode company-cabal company-c-headers company-anaconda company column-enforce-mode coffee-mode cmm-mode cmake-mode clean-aindent-mode clang-format cheatsheet cargo markdown-mode rust-mode bind-map bind-key biblio biblio-core auto-yasnippet yasnippet auto-highlight-symbol auto-dictionary auto-compile packed anaconda-mode pythonic f dash s aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core async ac-ispell auto-complete popup dracula-theme vterm emacsql-sqlite))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
