;; -*- mode: emacs-lisp -*-

;;; Dotspacemacs

; Remember to use outshine/outorg with this buffer!

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers

;;;; Layers

   '(ruby
     emacs-lisp
     helm ; full-featured auto-completion
     html
     javascript
     python

     ;; Features
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-complete-with-key-sequence "ff")
     (elfeed :variables rmh-elfeed-org-files (list "~/code/dots/files/elfeed.org"))
     git    ; magit! SPC g m
     github ; magithub!
     (shell :variables
            shell-default-shell 'ansi-term
            shell-default-position 'bottom)
     ranger
     imenu-list ; SPC b i
     spell-checking ; requires aspell
     syntax-checking

     ;; Languages
     (c-c++ :variables c-c++-enable-clang-support t)
     agda
     bibtex ; org-ref!
     coq
     (go :variables go-tab-width 4)
     lsp
     (haskell :variables haskell-enable-hindent-style "fundamental"
              haskell-completion-backend 'hie)
     ;; (haskell :variables haskell-enable-hindent-style "fundamental"
     ;;          haskell-completion-backend 'dante)
     (java :variables java-backend 'lsp)
     (latex :variables
            latex-build-command "LatexMk"
            latex-enable-auto-fill t)
     markdown
     org
     restructuredtext
                                        ; saw-script
     nixos
     shell-scripts ; enable shellcheck linting. TODO requires shellcheck.
     yaml
     )

;;;; Additional packages

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(;; all-the-icons
                                      w3m
                                      helpful
                                      mmm-mode      ; markdown multi-mode
                                      smart-hungry-delete ; delete all whitespace at once
                                      direnv        ; direnv + nix
                                      math-symbols  ; easily insert unicode latex macros
                                      prop-menu     ; needed for saw-script-mode
                                      ;; ORG
                                      ;; TODO: Make outshine/outorg layer
                                      outorg
                                      outshine
                                      ox-gfm       ; github markdown export for org
                                      org-board    ; link archiving
                                      link-hint    ; TODO: keybindings
                                      ascii-art-to-unicode ; nicer org-brain
                                      ;; (recipe
                                      ;;  :location (recipe :fetcher github
                                      ;;                    :repo "GaloisInc/saw-script"
                                      ;;                    :files '("saw-script.el")))
                                      ;; (recipe
                                      ;;  :location (recipe :fetcher github
                                      ;;                    :repo "google/google-java-format"
                                      ;;                    :files '("core/src/main/scripts/google-java-format.el")))
                                      ) ; '(toml-mode)
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   ;; https://github.com/syl20bnr/spacemacs/issues/2294
   dotspacemacs-excluded-packages '(exec-path-from-shell)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs-27.0.50")
   dotspacemacs-emacs-pdumper-executable-file "emacs-27.0.50"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes/colorschemes, the first of the list is loaded when
   ;; spacemacs starts. Press <SPC> T n to cycle to the next theme in the
   ;; list (works great with 2 themes variants, one dark and one light)
   ;; colorscheme
   dotspacemacs-themes '(
                         spacemacs-dark
                         tao-yang
                         tao-yin
                         ;; dichromacy
                         ;; zenburn
                         ;; hc-zenburn
                         ;; sanityinc-tomorrow-eighties
                         )
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Hack"
 :size 28
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols nil ; https://github.com/syl20bnr/spacemacs/issues/8462
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'origami

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   dotspacemacs-enable-server nil ; https://github.com/syl20bnr/spacemacs/issues/8462

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; Coq layer defines abbreviations on *single letters*, so by default typing
  ;; one letter and pressing ESC will expand the letter, which prevents typing
  ;; https://github.com/syl20bnr/spacemacs/issues/8853
  (setq evil-want-abbrev-expand-on-insert-exit nil))

;;;; =user-config=

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

;;;;; General

  (setq-default tab-width 4)

  ;; Set escape keybinding to "jk"
  (setq-default evil-escape-key-sequence "jk")

  ;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  ;; Use C-r for backwards terminal search, even in evil mode
  (defun siddharthist/setup-term-mode ()
    (evil-local-set-key 'normal (kbd "<prior>") 'scroll-up)
    (evil-local-set-key 'normal (kbd "<next>") 'scroll-down)
    (evil-local-set-key 'insert (kbd "C-r") 'siddharthist/send-C-r))

  ;; https://bit.ly/2OrfDO0
  (when (require 'hungry-delete nil 'noerror)
    (global-hungry-delete-mode))

  (defun siddharthist/send-C-r ()
    (interactive)
    (term-send-raw-string "\C-r"))

  (add-hook 'term-mode-hook 'siddharthist/setup-term-mode)

  (defun siddharthist/ansi-term-zsh ()
    (interactive)
    (ansi-term "/run/current-system/sw/bin/zsh"))

  (defun siddharthist/ansi-term-nix-shell ()
    (interactive)
    (ansi-term "nix-shell --run 'exec zsh'"))

;;;;;; (Ma)git

  (setq magithub-clone-default-directory "~/code")
  (setq magit-repository-directories '(("~/code" . 2)))
  (setq auth-sources '("~/.authinfo.gpg"))
  (setq magit-wip-merge-branch t)
  (add-hook 'prog-mode-hook 'magit-wip-mode)

;;;;;; Keybindings

  ;; Find good functions to put here with (list-command-history)
  (spacemacs/set-leader-keys
    ;; 'o' is the "user key"
    ;; 'e' for 'elisp'
    "oev"  'eval-region
    "oeb"  'eval-buffer

    ;; 'i' for insert
    "ois"  'math-symbols-insert

    ;; fonts
    "oFd"  'spacemacs/scale-down-font
    "oFu"  'spacemacs/scale-up-font

    ;; outshine/outorg/navi
    "ooe"  'outorg-edit-as-org
    "ooq"  'outorg-copy-edits-and-exit
    "ooc"  'outline-cycle ; prefer TAB
    "oon"  'outshine-navi ; prefer ji/jI/mr
    "oogu" 'outline-up-heading)

  ;; org-wiki and saw-script
  (add-to-list 'load-path "/home/siddharthist/.emacs.d/private/local/")

;;;;;; Ediff

  ;; https://emacs.stackexchange.com/questions/13019/how-to-undo-on-ediff-a-b-changes
  (add-hook 'ediff-mode-hook
    (lambda ()
      (progn
        ;; use undo-tree.el
        (defun my-ediff-undo-A ()
          (interactive)
          (save-window-excursion (with-selected-window ediff-window-A (undo-tree-undo))))
        (defun my-ediff-undo-B ()
          (interactive)
          (save-window-excursion (with-selected-window ediff-window-B (undo-tree-undo))))
        (defun my-ediff-redo-A ()
          (interactive)
          (save-window-excursion (with-selected-window ediff-window-A (undo-tree-redo))))
        (defun my-ediff-redo-B ()
          (interactive)
          (save-window-excursion (with-selected-window ediff-window-B (undo-tree-redo)))))))

  ;; Shift-Backspace does a hungry delete
  (when (require 'smart-hungry-delete)
    ;; (smart-hungry-delete-add-default-hooks) ; I'm suspicious of this.
    (global-set-key (kbd "S-<backspace>") 'smart-hungry-delete-backward-char))

;;;;; Prettify-symbols

  ;; https://bit.ly/2SVwzji
  ;; https://bit.ly/2QukKiD

  (defun my/two-spaces (symb)
    `(?\s (Br . Bl) ?\s (Bc . Bc) ,symb))

  (defun my/three-spaces (symb)
    `(?\s (Br . Bl) ?\s (Br . Bl) ?\s (Bc . Bc) ,symb))

  ;; lexical-let lets us define a closure
  (defun mapcdr (f)
    "Map a function over the second element of a pair"
    (lexical-let ((g f))
      (lambda (p) (cons (car p) (funcall g (cdr p))))))

  (defun mapvalues (f seq &optional seqtype)
    "Map a function over the values stored in an alist"
    (lexical-let ((g f))
      (map (if seqtype seqtype 'list) (mapcdr g) seq)))

  ;; TODO: get this working
  ;; https://bit.ly/2zyR508
  ;; (defun make-spaces (el)
  ;;   (let ((space-width (string-width (car el))))
  ;;     (cons (car el)
  ;;           (append (make-list (- space-width 1) '(?\s (Br . Bl)))
  ;;                   '(?\s (Br . Br))
  ;;                   (cons (cdr el) nil)))))
  (setq comparison-prettify-symbols-alist
         (mapvalues 'my/two-spaces
                    '((">=" . ?≥)
                      ("<=" . ?≤)
                      ("==" . ?≟)
                      ("/=" . ?≠)
                      ("!=" . ?≠))))

  ;; The commented-out versions are the "short" arrows, active are "long"
  (setq arrow-prettify-symbols-alist
        (mapvalues 'my/two-spaces
                   '(("=>" . ?⟹)
                     ("<=" . ?⟸)
                     ("->" . ?⟶)
                     ("<-" . ?⟵)
                     ;; ("=>" . ?⇒)
                     ;; ("->" . ?→)
                     ;; ("<-" . ?←)
                     )))

  ;; Not working :/
  ;; https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters
  ;; (setq percent-encoding-prettify-symbols
  ;;       (mapvalues 'my/three-spaces
  ;;                  '(("\%20" . " ")
  ;;                    ("\%21" . "!"))))

  (setq bool-prettify-symbols-alist
        (mapvalues 'my/two-spaces
                   '(("&&" . ?∧)
                     ("||" . ?∨))))

  (setq haskell-prettify-symbols-alist
        (append
         comparison-prettify-symbols-alist
         arrow-prettify-symbols-alist
         bool-prettify-symbols-alist
         ;; (mapvalues 'my/three-spaces
         ;;            '(("<*>" . ?⊛)))
         (mapvalues 'my/two-spaces
                    '(("<|" . ?⊲) ; sequences
                      ("|>" . ?⊳) ; sequences
                      ("::" . ?∷)))))

  (setq org-prettify-symbols-alist
        (append
         ;; percent-encoding-prettify-symbols
         comparison-prettify-symbols-alist
         arrow-prettify-symbols-alist
         bool-prettify-symbols-alist
         (mapvalues 'my/two-spaces
                    '(("::" . ?∷)))))

  (setq prettify-symbols-unprettify-at-point t)

  (defun my/haskell-prettify-symbols ()
    "Enable prettification for Haskell symbols."
    (interactive)
    (prettify-symbols-mode -1)
    (setq-local prettify-symbols-alist haskell-prettify-symbols-alist)
    (prettify-symbols-mode))
  (add-hook 'haskell-mode-hook 'my/haskell-prettify-symbols)

  (defun my/org-prettify-symbols ()
    "Enable prettification for Org symbols."
    (interactive)
    (prettify-symbols-mode -1)
    (setq-local prettify-symbols-alist org-prettify-symbols-alist)
    (prettify-symbols-mode))
  (add-hook 'org-mode-hook 'my/org-prettify-symbols)

;;;;; Elfeed

  ;; https://github.com/iqbalansari/dotEmacs/blob/master/config/rss.org
  ;; (defun my/elfeed-open-in-w3m ()
  ;;   (interactive)
  ;;   (let ((browse-url-browser-function (cond ((locate-library "w3m") #'w3m-browse-url)
  ;;                                            ((locate-library "eww") #'eww-browse-url)
  ;;                                            (t (progn (message "`w3m' not installed, falling back to system browser")
  ;;                                                      #'browse-url-default-browser)))))
  ;;     (elfeed-search-untag-all 'unread)
  ;;     (save-excursion
  ;;       (forward-line -1)
  ;;       (elfeed-search-browse-url))))

  ;; (defun my/elfeed-mode-kbd ()
  ;;   (progn
  ;;     (require 'elfeed)
  ;;     (define-key elfeed-search-mode-map (kbd "3") 'my/elfeed-open-in-w3m)))

  ;; TODO: is this the right mode hook?
  ;; (require 'elfeed
  ;;          (add-hook 'elfeed-show-mode-hook my/elfeed-mode-kbd))

;;;;; Org

  ;; hideshow-org
  ;; TODO: change keybinding? may interfere with outshine
  ;; (when (require 'hideshow-org nil 'noerror)
  ;;   (add-hook 'prog-mode-hook 'hs-org/minor-mode))

  ;; Outshine/outorg

  (when (require 'org-link-minor-mode nil 'noerror)
        (add-hook 'prog-mode-hook 'org-link-minor-mode))

  (when (require 'outshine nil 'noerror)
    (progn
      (defvar outline-minor-mode-prefix "\C-o") ;; TODO change
      (setq outorg-edit-buffer-persistent-message nil)
      (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
      (add-hook 'prog-mode-hook          'outline-minor-mode)
      (add-hook 'haskell-mode-hook
                '(lambda () (progn (setq outshine-preserve-delimiter-whitespace t)))))

      (defun my/outline-level-faces ()
        (interactive)
        (dolist (pair (list (cons 'outline-1 'org-level-1)
                            (cons 'outline-2 'org-level-2)
                            (cons 'outline-3 'org-level-3)
                            (cons 'outline-4 'org-level-4)
                            (cons 'outline-5 'org-level-5)
                            (cons 'outline-6 'org-level-6)
                            (cons 'outline-7 'org-level-7)
                            (cons 'outline-8 'org-level-8)))
          (set-face-attribute (car pair) nil :height (face-attribute (cdr pair) :height)))))
      ;; (set-face-attribute (car pair) nil :height (float (- 2 (/ (cdr pair) 8))))))

  (add-hook 'outline-minor-mode-hook 'my/outline-level-faces)

  (setq org-directory          "~/Dropbox/langston/org")
  (setq org-wiki-location      "~/Dropbox/langston/org"
        org-brain-path         "~/Dropbox/langston/org"
        org-agenda-files       '("~/Dropbox/langston/org")
        org-default-notes-file (concat org-directory "/capture.org"))

  (with-eval-after-load 'org

    (add-hook 'org-mode-hook
              (lambda () (progn
                           (when (require 'agda-input nil 'noerror) (set-input-method "Agda"))
                           (add-hook 'after-save-hook
                                     '(lambda () (progn (org-babel-tangle)
                                                        (message "%s tangled" buffer-file-name))))

                           ;; (add-hook 'org-babel-post-tangle-hook
                           ;;           '(lambda () (indent-region (point-min) (point-max))))

                           (fci-mode t)          ; Enable fill column indicator
                           (setq fill-column 80) ; Set fill column to 80
                           (auto-fill-mode t)    ; Automatic line wrapping at fill column

                           (defun aa2u-buffer () (aa2u (point-min) (point-max)))
                           (add-hook 'org-brain-after-visualize-hook #'aa2u-buffer)

                           (add-to-list 'write-file-functions 'delete-trailing-whitespace))))


    ;; Nicer org-brain

    (require 'org-wiki nil 'noerror)
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively   t
          org-src-tab-acts-natively  t)

    ;; Clock
    (setq org-clock-persist t)
    (setq org-clock-history-length 20)
    (setq org-agenda-clock-consistency-checks
          (quote (:max-duration "6:00"
                                :min-duration 0
                                :max-gap 2
                                :gap-ok-around ("4:00"))))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "ACTIVE(a!)" "WAIT(w@/!)" "|" "DONE(@)")
            (sequence "|" "CANCELLED(c@/!)")))

    ;; Add CREATED property (https://bit.ly/2OyePrR)
    (defvar org-created-property-name "CREATED"
      "The name of the org-mode property that stores the creation date of the entry")

    (defun org-set-created-property (&optional active NAME)
      "Set a property on the entry giving the creation time.

By default the property is called CREATED. If given the `NAME'
argument will be used instead. If the property already exists, it
will not be modified."
      (interactive)
      (let* ((created (or NAME org-created-property-name))
             (fmt (if active "<%s>" "[%s]"))
             (now  (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
        (unless (org-entry-get (point) created nil)
          (org-set-property created now))))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((coq        . t)
       (dot        . t)
       (emacs-lisp . t)
       (haskell    . t)
       (java       . t)
       (python     . t)
       (shell      . t)
       ))

    (spacemacs/set-leader-keys-for-major-mode 'org-mode

      ;; dynamic blocks
      "Du"  'org-dblock-update
      "Da"  'org-update-all-dblocks

      ;; org-wiki
      "wI"  'org-wiki-index
      "wil" 'org-wiki-insert-link
      "win" 'org-wiki-insert-new
      "wn"  'org-wiki-nav
      "wf"  'org-wiki-helm
      "wh"  'org-wiki-panel
      "ws"  'org-wiki-switch-root

      ;; org-time-stamp
      "oTi" 'org-time-stamp
      "oTI" 'org-time-stamp-inactive

      ;; CREATED property
      "iPC" 'org-set-created-property

      ;; org-brain
      "mA"  'org-brain-agenda
      "mp"  'org-brain-pin
      "mR"  'org-brain-refile
      "mx"  'org-brain-delete-entry

      ;; org-brain: navigation
      "gp"  'org-brain-goto-parent
      "gc"  'org-brain-goto-child
      "gf"  'org-brain-goto-friend

      ;; org-brain: relationships
      "mac" 'org-brain-add-child
      "map"  'org-brain-add-parent
      "maf"  'org-brain-add-friendship
      "mrc"  'org-brain-add-child
      "mrp"  'org-brain-add-parent
      "mrf"  'org-brain-add-friendship

      ;; helm-org-rifle (added upstream)
      ;; "r"   'helm-org-rifle

      ;; org-board
      "Ba"   'org-board-archive
      "BA"   'org-board-archive-dry-run

      ;; org-subtree
      "sc"   'org-cut-subtree
      "sy"   'org-copy-subtree
      "sp"   'org-paste-subtree
      "sm"   'org-mark-subtree
      ))

;;;;; C

  ;; put in ~/.emacs.d/private/local/
  ;; https://github.com/llvm-mirror/llvm/blob/master/utils/emacs/llvm-mode.el
  (require 'llvm-mode nil 'noerror)

  ;; https://bit.ly/2QqJLvw

  (defun siddharthist/clang-format-buffer-smart ()
    "Reformat buffer if .clang-format exists in the projectile root."
    (interactive)
    (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
      (clang-format-buffer)))

  (defun siddharthist/clang-format-buffer-smart-on-save ()
    "Add auto-save hook for clang-format-buffer-smart."
    (add-hook 'before-save-hook 'siddharthist/clang-format-buffer-smart nil t))

  (spacemacs/add-to-hooks 'clang-format-buffer-smart-on-save
                          '(c-mode-hook c++-mode-hook))

;;;;; Haskell

  (with-eval-after-load 'haskell

    (setq dante-repl-command-line '("nix-shell" "--pure" "--run" "cabal repl --builddir=dist/dante"))
    (add-hook 'dante-mode-hook
              '(lambda () (flycheck-add-next-checker 'haskell-dante
                                                    '(warning . haskell-hlint))))

    ; Set the Haskell mode outline header syntax to be "-- *"
    ; https://gist.github.com/alphapapa/0f76ffe9792fffecb017
    (defun siddharthist/haskell-mode-outline-hook ()
      (setq outline-regexp
            (rx
              ;; Outline headings
              (and (* space)
                  (one-or-more (syntax comment-start))
                  (* space)
                  (group (one-or-more "\*"))
                  (* space)))))
    (add-hook 'haskell-mode-hook 'siddharthist/haskell-mode-outline-hook)
    (add-hook 'haskell-mode-hook
              '(lambda () (progn
                            (when (require 'haskell-pragma nil 'noerror)
                              (haskell-pragma-mode))
                            (spacemacs/toggle-whitespace-cleanup-off))))
    (add-hook 'haskell-pragma-mode-hook
              '(lambda () (spacemacs/set-leader-keys-for-major-mode 'haskell-mode
                            "ip"  'haskell-pragma-add-other-extension
                            )))
    (add-hook 'w3m-display-hook 'w3m-haddock-display)

    ;; Find the declaration of an identifier
    (defun my/haskell-find-declaration ()
      (interactive)
      (let* ((cur-word (thing-at-point 'word)))
        (grep (concat cur-word " ::"))))

    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "ff"  'my/haskell-find-declaration)

    ;; More align rules for Haskell
    ;; https://bit.ly/2Rn92GA
    ;; https://bit.ly/2Oh0lvt
    (with-eval-after-load 'align
      ;; Align EOL comments TODO: moves comment-only lines
      ;; (add-to-list 'align-rules-list
      ;;              '(haskell-eol-comment
      ;;                (regexp . "\\(\\s-+\\)--\\s-+")
      ;;                (modes . haskell-modes)))
      ;; Align arrow operators
      (add-to-list 'align-rules-list
                  '(haskell-eol-comment
                    (regexp . "\\(\\s-+\\)\\(>>>\\|<<<\\|&&&\\|\\*\\*\\*\\)\\s-+")
                    (modes . haskell-modes)))
      ;; Align if/then/else
      (add-to-list 'align-rules-list
                  '(haskell-ite
                    (regexp . "\\(\\s-+\\)\\(if\|then\|else\\)\\s-+")
                    (modes . haskell-modes)))
      ;; Align on applicative delimiters
      (add-to-list 'align-rules-list
                  '(haskell-applicative
                    (regexp . "\\(\\s-+\\)\\(<$>\\|<\\*>\\)\\s-+")
                    (modes . haskell-modes)))))

;;;;; Java

  ;; Formatting really screws things up in weird ways.
  ;; e.g.: https://github.com/emacs-lsp/lsp-java/issues/75
  (eval-after-load 'java
    (progn
      (setq lsp-java-format-comments-enabled nil)
      (setq lsp-java-format-comments-enabled nil)))

;;;;; Coq

  ;; (with-eval-after-load 'company-coq
  ;;    (add-to-list 'company-coq-disabled-features 'prettify-symbols))

  ;; Coq key bindings:
  ;; - Use SPC-m-SPC instead of SPC-m-. for less pinky strain
  ;; - Use SPC-gE to process to the end of the file. Good for finding out where one left off.
  (spacemacs/set-leader-keys-for-major-mode 'coq-mode
    "gE"  '(lambda () (interactive) (progn (evil-goto-line) (proof-goto-point)))
    "SPC" 'proof-goto-point
    "miH" 'siddharthist-surround-region-hide)
  (setq coq-one-command-per-line nil)       ; https://github.com/ProofGeneral/PG/issues/53
  (setq proof-electric-terminator-enable t) ; https://github.com/ProofGeneral/PG/issues/53

  ;; surround a region with a hide command for coqdoc
  (defun siddharthist/surround-region-hide ()
    (interactive)
    (progn
      (goto-char (region-end))
      (insert "(* end hide *)")
      (goto-char (region-beginning))
      (insert "(* begin hide *)\n")))

  ; undo-tree and proof-general do NOT work together, this makes the breakage more tolerable
  (setq undo-tree-enable-undo-in-region nil)

  ;; Cobbled together from:
  ; https://github.com/abo-abo/helm-make/blob/e72cdacecb46421dfbde9febdc352a5f06425176/helm-make.el#L377
  ; https://github.com/ProofGeneral/PG/blob/c54b17d14e57eb77093ec0006d2db5e9e3754902/coq/coq.el#L1800
  ; TODO: n is void?
  (defun siddharthist/coq-compile-projectile ()
    (interactive)
    (require 'projectile)
    (let ((makefile (concat (projectile-project-root) "/Makefile"))
          (n (buffer-name))
          (l (string-match ".v" n)))
      (if (not makefile)
          (error "No build file found for project %s" (projectile-project-root)))
      (compile (concat "make " (substring n 0 l) ".vo"))))

  (defun siddharthist/coq-helm-hypothesis ()
    (interactive)
    (require 'company-coq)
    (require 'helm)
    (helm :sources (helm-build-sync-source "test"
                     :candidates company-coq--hyp-names
                     :action (helm-make-actions "Insert" (lambda (x) (insert x))))
          :buffer "*helm blah*"))

;;;;; Shell

  (add-hook 'sh-mode-hook '(lambda () (setq sh-basic-offset 2
                                            sh-indentation 2)))

;;;;; Python

  ;; Jump to top-level definitions
  ;; (spacemacs/set-leader-keys-for-major-mode 'python-mode
  ;;   (completing-read prompt candidates nil t)
  ;;   "gt"  '(lambda () (interactive) (helm-ag-this-file)))

;;;;; LaTeX

  (add-hook 'doc-view-mode-hook 'auto-revert-mode) ; see latex layer docs
  (setq require-final-newline t)

  ;; make backslash easier in TeX, use Agda input mode
  ;; TODO: make backslash semicolon
  (add-hook 'org-mode-hook   '(lambda () (local-set-key (kbd ";") "\\")))
  (add-hook 'TeX-mode-hook   '(lambda () (local-set-key (kbd ";") "\\")))
  (add-hook 'LaTeX-mode-hook '(lambda () (local-set-key (kbd ";") "\\")))
  (setq TeX-view-program-selection '((output-pdf "Zathura")))
  ; (spacemacs/set-leader-keys-for-major-mode 'TeX-mode "mim" 'math-symbols-helm-insert-char)

;;;;; Mutt

  (defun siddharthist/msg-mode ()
    ;; Map j/k to move visual lines.
    (define-key evil-motion-state-map "j" 'evil-next-visual-line)
    (define-key evil-motion-state-map "k" 'evil-previous-visual-line)
    (define-key evil-visual-state-map "j" 'evil-next-visual-line)
    (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
    (visual-line-mode)
    )
  (add-hook 'message-mode-hook 'msg-mode)
  (add-to-list 'auto-mode-alist '(".*mutt.*" . message-mode))

  )

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (w3m yasnippet-snippets yapfify yaml-mode xterm-color ws-butler winum which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tao-theme tagedit symon string-inflection spaceline-all-the-icons smeargle smart-hungry-delete slim-mode shell-pop seeing-is-believing scss-mode sass-mode rvm ruby-tools ruby-test-mode ruby-refactor ruby-hash-syntax rubocop rspec-mode robe restart-emacs rbenv ranger rake rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode prop-menu proof-general prettier-js pippel pipenv pip-requirements persp-mode password-generator paradox overseer outshine origami orgit org-ref org-projectile org-present org-pomodoro org-mime org-download org-bullets org-brain org-board open-junk-file nix-mode neotree nameless mvn multi-term move-text mmm-mode minitest meghanada maven-test-mode math-symbols markdown-toc magithub magit-svn magit-gitflow magit-gh-pulls macrostep lsp-ui lsp-python lsp-javascript-typescript lsp-java lsp-haskell lsp-go lorem-ipsum livid-mode live-py-mode link-hint json-navigator json-mode js2-refactor js-doc intero insert-shebang indent-guide importmagic impatient-mode hungry-delete hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helpful helm-xref helm-themes helm-swoop helm-rtags helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-nixos-options helm-mode-manager helm-make helm-hoogle helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haskell-snippets groovy-mode groovy-imports gradle-mode google-translate google-c-style golden-ratio godoctor go-tag go-rename go-impl go-guru go-gen-test go-fill-struct go-eldoc gnuplot gitignore-templates github-search github-clone gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gist gh-md fuzzy font-lock+ flyspell-correct-helm flycheck-rtags flycheck-pos-tip flycheck-haskell flycheck-bashate flx-ido fish-mode fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-org evil-numbers evil-nerd-commenter evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help ensime emmet-mode elisp-slime-nav elfeed-web elfeed-org elfeed-goodies editorconfig dumb-jump dotenv-mode doom-modeline disaster direnv diminish diff-hl define-word dante cython-mode counsel-projectile company-web company-tern company-statistics company-shell company-rtags company-nixos-options company-lsp company-go company-ghci company-ghc company-emacs-eclim company-coq company-cabal company-c-headers company-auctex company-anaconda column-enforce-mode cmm-mode clean-aindent-mode clang-format chruby centered-cursor-mode bundler browse-at-remote auto-yasnippet auto-highlight-symbol auto-dictionary auto-complete-rst auto-compile auctex-latexmk ascii-art-to-unicode aggressive-indent ace-window ace-link ace-jump-helm-line ac-ispell)))
 '(safe-local-variable-values
   (quote
    ((dante-repl-command-line "nix-shell" "nix/shell.nix" "--pure" "--run" "cabal repl lib:llvm-pretty --builddir=dist/dante")
     (org-src-preserve-indentation . t)
     (eval defun my/grep-link
           (regexp)
           "Run `rgrep' with REGEXP as argument."
           (grep-compute-defaults)
           (rgrep
            (concat regexp " :: ")
            "*"
            (expand-file-name "~/code/llvm-pretty-bc-parser/src")))
     (eval org-add-link-type "id"
           (quote my/grep-link))
     (org-log-into-drawer . t)
     (org-enforce-todo-dependencies . t)
     (org-enforce-todo-checkbox-dependencies . t)
     (org-archive-location . "~/Dropbox/langston/archive/org/archive-%s::")
     (dante-repl-command-line "nix-shell" "nix/shell.nix" "--pure" "--run" "cabal configure && cabal repl lib:llvm-pretty-bc-parser --builddir=dist/dante")
     (eval let
           ((unimath-topdir
             (expand-file-name
              (locate-dominating-file buffer-file-name "UniMath"))))
           (setq fill-column 100)
           (make-local-variable
            (quote coq-use-project-file))
           (setq coq-use-project-file nil)
           (make-local-variable
            (quote coq-prog-args))
           (setq coq-prog-args
                 (\`
                  ("-emacs" "-noinit" "-indices-matter" "-type-in-type" "-w" "-notation-overridden,-local-declaration,+uniform-inheritance,-deprecated-option" "-Q"
                   (\,
                    (concat unimath-topdir "UniMath"))
                   "UniMath")))
           (make-local-variable
            (quote before-save-hook))
           (add-hook
            (quote before-save-hook)
            (quote delete-trailing-whitespace))
           (modify-syntax-entry 39 "w")
           (modify-syntax-entry 95 "w")
           (if
               (not
                (memq
                 (quote agda-input)
                 features))
               (load
                (concat unimath-topdir "emacs/agda/agda-input")))
           (if
               (not
                (member
                 (quote
                  ("chimney" "╝"))
                 agda-input-user-translations))
               (progn
                 (setq agda-input-user-translations
                       (cons
                        (quote
                         ("chimney" "╝"))
                        agda-input-user-translations))
                 (setq agda-input-user-translations
                       (cons
                        (quote
                         ("==>" "⟹"))
                        agda-input-user-translations))
                 (agda-input-setup)))
           (set-input-method "Agda"))
     (eval let
           ((unimath-topdir
             (expand-file-name
              (locate-dominating-file buffer-file-name "UniMath"))))
           (setq fill-column 100)
           (make-local-variable
            (quote coq-use-project-file))
           (setq coq-use-project-file nil)
           (make-local-variable
            (quote coq-prog-args))
           (setq coq-prog-args
                 (\`
                  ("-emacs" "-noinit" "-indices-matter" "-type-in-type" "-w" "-notation-overridden,-local-declaration,+uniform-inheritance,-deprecated-option" "-Q"
                   (\,
                    (concat unimath-topdir "UniMath"))
                   "UniMath")))
           (make-local-variable
            (quote coq-prog-name))
           (setq coq-prog-name
                 (concat unimath-topdir "sub/coq/bin/coqtop"))
           (make-local-variable
            (quote before-save-hook))
           (add-hook
            (quote before-save-hook)
            (quote delete-trailing-whitespace))
           (modify-syntax-entry 39 "w")
           (modify-syntax-entry 95 "w")
           (if
               (not
                (memq
                 (quote agda-input)
                 features))
               (load
                (concat unimath-topdir "emacs/agda/agda-input")))
           (if
               (not
                (member
                 (quote
                  ("chimney" "╝"))
                 agda-input-user-translations))
               (progn
                 (setq agda-input-user-translations
                       (cons
                        (quote
                         ("chimney" "╝"))
                        agda-input-user-translations))
                 (setq agda-input-user-translations
                       (cons
                        (quote
                         ("==>" "⟹"))
                        agda-input-user-translations))
                 (agda-input-setup)))
           (set-input-method "Agda"))
     (javascript-backend . tern)
     (javascript-backend . lsp)
     (go-backend . go-mode)
     (go-backend . lsp)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
